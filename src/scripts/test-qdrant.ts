/**
 * Script de prueba para verificar la conexi√≥n con Qdrant
 * Ejecutar con: npx tsx src/scripts/test-qdrant.ts
 */

import { qdrantClient, ensureRoutesCollection, getCollectionInfo, countEmbeddings } from '../lib/qdrant';

async function testQdrantConnection() {
  console.log('üîç Probando conexi√≥n con Qdrant...\n');

  try {
    // 1. Verificar conexi√≥n
    console.log('1. Verificando conexi√≥n...');
    const collections = await qdrantClient.getCollections();
    console.log('‚úÖ Conexi√≥n exitosa!');
    console.log(`üì¶ Colecciones existentes: ${collections.collections.length}`);
    collections.collections.forEach(col => {
      console.log(`   - ${col.name}`);
    });
    console.log('');

    // 2. Crear/verificar colecci√≥n
    console.log('2. Verificando colecci√≥n de rutas...');
    await ensureRoutesCollection();
    console.log('‚úÖ Colecci√≥n de rutas lista!');
    console.log('');

    // 3. Obtener informaci√≥n de la colecci√≥n
    console.log('3. Informaci√≥n de la colecci√≥n:');
    const info = await getCollectionInfo();
    console.log(`   Estado: ${info.status}`);
    console.log(`   Puntos almacenados: ${info.points_count || 0}`);
    if (info.config.params.vectors && typeof info.config.params.vectors === 'object' && 'size' in info.config.params.vectors) {
      console.log(`   Tama√±o del vector: ${info.config.params.vectors.size}`);
      console.log(`   Distancia: ${info.config.params.vectors.distance}`);
    }
    console.log('');

    // 4. Contar embeddings
    console.log('4. Contando embeddings...');
    const count = await countEmbeddings();
    console.log(`‚úÖ Total de embeddings: ${count}`);
    console.log('');

    console.log('üéâ ¬°Todas las pruebas pasaron exitosamente!');
    console.log('\nüìù Pr√≥ximos pasos:');
    console.log('   1. Aseg√∫rate de tener GOOGLE_API_KEY en tu archivo .env');
    console.log('   2. Escanea rutas desde la interfaz web');
    console.log('   3. Genera embeddings con el bot√≥n "Generar Embeddings"');
    console.log('   4. Usa la b√∫squeda sem√°ntica para encontrar rutas similares');

  } catch (error) {
    console.error('‚ùå Error:', error);
    console.log('\nüîß Soluciones posibles:');
    console.log('   1. Verifica que el contenedor de Qdrant est√© corriendo:');
    console.log('      docker ps | grep qdrant');
    console.log('   2. Si no est√° corriendo, in√≠cialo:');
    console.log('      docker start qdrant');
    console.log('   3. Verifica que QDRANT_URL est√© correctamente configurado en .env');
    console.log('      QDRANT_URL=http://localhost:8080');
  }
}

// Ejecutar pruebas
testQdrantConnection();
